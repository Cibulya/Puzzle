const body = document.body;

//Container 
const container = document.createElement('div')
container.className = 'container';
container.setAttribute('id','container')
body.prepend(container);


// Control panel some buttons

const controlPanel = document.createElement('div');
controlPanel.className = 'control-panel';
container.prepend(controlPanel);

// some buttons
const resetButton = document.createElement('button');
resetButton.className = 'button button__reset';
resetButton.innerText = 'New Game';
const pauseButton = document.createElement('button');
pauseButton.className = 'button button__pause';
pauseButton.innerText = 'Pause';

pauseButton.addEventListener('click', () => {
   if (watch.className === (('counters__gametime'))) {
      pauseWatch();
      pauseButton.innerText = 'Unpause';
   }
      
   
   else {
      startWatch();
      pauseButton.innerText = 'Pause';
   }
})
const saveButton = document.createElement('button');
saveButton.className = 'button button__save';
saveButton.innerText = 'Save';
const resultsButton = document.createElement('button');
resultsButton.className = 'button button__results'
resultsButton.innerText = 'Results';
controlPanel.prepend(resetButton, pauseButton, saveButton, resultsButton);

// counters move & time
const counters = document.createElement('div');
counters.className = 'counters';
controlPanel.appendChild(counters)

const moves = document.createElement('div');
// moves.innerText = 'Moves : 0';
const movesText = document.createElement('span');
movesText.innerText = 'Moves: ';
const movesCount = document.createElement('span')
movesCount.classList ='counters__moves'

moves.append(movesText,movesCount)
const gameTime = document.createElement('p');
gameTime.classList = 'counters__gametime';
gameTime.innerText = 'Game time =>  :';
counters.append(gameTime,moves);



// game field


const values = new Array(16).fill(0).map((item, index) => index + 1);
const gameField = document.createElement('div');
gameField.className = 'gamefield';
gameField.setAttribute('id', 'gameField');
container.append(gameField);
values.forEach((el) => {
   //cells
   const cell = document.createElement('button');
   cell.className = 'cell';
   cell.innerHTML = [el];
   cell.dataset.matrixId = [el];
   gameField.append(cell);
   
});
// Game
const containerNode = document.getElementById('gameField');
const itemNodes = Array.from(containerNode.querySelectorAll('.cell'));

const countItems = 16;

// hide 16 cell
itemNodes[countItems -1].style.display = 'none'
// check for 16
if (itemNodes.length !== 16) {
   throw new Error('Clown juice')
}

//1. position
let matrix = getMatrix(itemNodes.map((cell) => Number(cell.dataset.matrixId)));
setPositioncells(matrix);




//2. shuffle
const shuffle = document.querySelector('.button__reset');
shuffle.addEventListener('click', () => {
   const shuffledArray = shuffleArray(matrix.flat())
   matrix = getMatrix(shuffledArray);
   setPositioncells(matrix);
   let movesNumber = document.querySelector('.counters__moves');
   movesNumber.innerText = '0';
   resetWatch();
   startWatch();
})





//3. change position
const emptyCell = 16;
containerNode.addEventListener('click', (event) => {
   const cellNode = event.target.closest('button');
   if (!cellNode) {
      return
   }
   const cellNumber = Number(cellNode.dataset.matrixId);
   const cellCoordinates = findCoords(cellNumber, matrix);
   const emtyCoordinates = findCoords(emptyCell, matrix);
   const isValid = isValidForMove(cellCoordinates, emtyCoordinates);
   if (isValid) {
      swap(emtyCoordinates, cellCoordinates, matrix);
      setPositioncells(matrix);
      let movesNumber = document.querySelector('.counters__moves');
      movesNumber.innerText = (movesNumber.innerText | 0) + 1;
      clownhonk.play();
   }
})

//4. Helpers
function getMatrix(arr) {
   const matrix = [[], [], [], []];
   let y = 0;
   let x = 0;
   for (let i = 0; i < arr.length; i++){
      if (x >= 4) {
         y++;
         x = 0;
      }
      matrix[y][x] = arr[i];
      x++
   }
   return matrix;
}

function setPositioncells(matrix) {
   for (let y = 0; y < matrix.length; y++){
      for (let x = 0; x < matrix.length; x++){
         const value = matrix[y][x];
         const node = itemNodes[value - 1];
         setCellsStyles(node, x, y)
      }
   }
}

function setCellsStyles(node, x, y) {
   const shiftPosition = 100;
   node.style.transform = `translate3D(${x * shiftPosition}%,${y * shiftPosition}%,0)`;
}

function shuffleArray(arr) {
   return arr
      .map(value => ({ value, sort: Math.random() }))
      .sort((a, b) => a.sort - b.sort)
      .map(({value})=>value)
}


function findCoords(number, matrix) {
   for (let y = 0; y < matrix.length; y++){
      for (let x = 0; x < matrix.length; x++){
         if (matrix[y][x] === number) {
            return { x, y };
         }
      }
   }
   return null;
}



function isValidForMove(coords1, coords2) {
   const diffX = Math.abs(coords1.x - coords2.x);
   const diffY = Math.abs(coords1.y - coords2.y);
   return (diffX === 1 || diffY === 1) && (coords1.x === coords2.x || coords1.y === coords2.y);
}


function swap(coords1, coords2, matrix) {
   const coords1Number = matrix[coords1.y][coords1.x];
   matrix[coords1.y][coords1.x] = matrix[coords2.y][coords2.x];
   matrix[coords2.y][coords2.x] = coords1Number;
   if (isWon(matrix)) {
      winScreen();
   }
}

// win function
const winCombi = new Array(16).fill(0).map((_item, i) => i + 1);
function isWon(values) {
   const flatMatrix = values.flat();
   for (let i = 0;i< winCombi.length; i++){
      if (flatMatrix[i] !== winCombi[i]) {
         return false;
      }
   }
   return true;
}

function winScreen() {
   const winSc = document.createElement('div');
   const video = document.createElement('video')
   video.className = 'win__video';
   winSc.className = 'win__screen';
   winSc.classList.add('active');
   video.setAttribute('src', './files/Galaxy_Brain_meme.mp4');
   video.muted = true;
   video.loop = true;
   video.autoplay = true;
   let movesNumber = document.querySelector('.counters__moves');
   movesNumber.innerText = (movesNumber.innerText | 0) + 1;
   const winText = document.createElement('div');
   winText.innerText = 'You win with:  ' + ' ' + 'Moves ' + movesNumber.innerText;
   
   const winResult = {
      text: winText.innerText,
      time: movesNumber.innerText + ' Secs'
   };
   saveButton.addEventListener('click', () => {
      const storage = localStorage;
      for (let i = 0; i < storage.length; i++){
         storage.length = localStorage.length++;
         console.log(localStorage.length)
      }
      
   });
   
   
   // localStorage.clear();
   const brainMeme = new Audio('./files/Brain_meme.mp3');
   brainMeme.play();
   brainMeme.volume = 0.3;
   pauseWatch();
   winSc.append(winText, video);
   winSc.firstChild.append(watch)
   body.append(winSc);
   winSc.addEventListener('click', function () {
      winSc.classList.remove('active');
      brainMeme.pause();
      if(watch.className === (('counters__gametime')))
      pauseWatch();
      else {
         startWatch();
         counters.append(watch);
      }
   })
}




let clownhonk = new Audio('./files/clown.mp3');
clownhonk.volume = 0.3;

const muteHonk = document.createElement('button');
   muteHonk.className = 'button mute__button';
   muteHonk.innerHTML = 'Mute';
   controlPanel.appendChild(muteHonk);
   muteHonk.addEventListener('click', function () {
      if (clownhonk.volume > 0) {
         clownhonk.volume = 0;
         muteHonk.innerHTML = 'Unmute';
      } else {
         clownhonk.volume = 0.3;
         muteHonk.innerHTML = 'Mute';
      }
      return clownhonk.volume;
   })


// Watch

const watch = document.querySelector('.counters__gametime');
let milliseconds = 0;
let timer;
const startWatch = () => {
   watch.classList.remove('paused');
   clearInterval(timer);
   let cell = document.getElementById('gameField');
   cell.style.pointerEvents = 'auto';
   timer = setInterval(() => {
      milliseconds += 10;
      let dateTamer = new Date(milliseconds);
      watch.innerHTML =
         'Time =>  :' +
         ('0' + dateTamer.getUTCMinutes()).slice(-2) + ':'+
         ('0' + dateTamer.getUTCSeconds()).slice(-2);
   },10)
}
const pauseWatch = () => {
   watch.classList.add('paused');
   let cell = document.getElementById('gameField');
   cell.style.pointerEvents = 'none';
   clearInterval(timer);
};

const resetWatch = ()=>{
   watch.classList.remove('paused');
   clearInterval(timer);
   milliseconds = 0;
   watch.innerHTML = 'Game time =>  :'
}

startWatch();

const instaWin = function instaWin(){
   const iwButton = document.createElement('button');
   iwButton.className = 'button instawin__button';
   iwButton.innerText = 'Instant win';
   container.append(iwButton)
   console.log(iwButton)
   iwButton.addEventListener('click', () => {
      winScreen();
      let matrix = getMatrix(itemNodes.map((cell) => Number(cell.dataset.matrixId)));
      setPositioncells(matrix);
      let res = setTimeout(() => {
         firstShuffle()
      }, 5000);
      res;
   })
}
instaWin();


function firstShuffle() {
   const shuffledArray = shuffleArray(matrix.flat())
   matrix = getMatrix(shuffledArray);
   setPositioncells(matrix);
   let movesNumber = document.querySelector('.counters__moves');
   movesNumber.innerText = '0';
   resetWatch();
   startWatch();
}
firstShuffle();
